import expRejillas as slit
import unittest

class TestClasicoCuamtico(unittest.TestCase):
     def test_multipleRendija_clasica(self):

        result = slit.multipleRendijasClasico(3,2,[[0,1/6,5/6],[1/3,1/2,1/6],[2/3,1/3,0]])
        self.assertEqual(result,[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.5773502691896258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.5773502691896258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.5773502691896258, [0, 0.16666666666666666, 0.8333333333333334], [0.3333333333333333, 0.5, 0.16666666666666666], [0.6666666666666666, 0.3333333333333333, 0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, [0, 0.16666666666666666, 0.8333333333333334], [0.3333333333333333, 0.5, 0.16666666666666666], [0.6666666666666666, 0.3333333333333333, 0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, [0, 0.16666666666666666, 0.8333333333333334], [0.3333333333333333, 0.5, 0.16666666666666666], [0.6666666666666666, 0.3333333333333333, 0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, [0, 0.16666666666666666, 0.8333333333333334], [0.3333333333333333, 0.5, 0.16666666666666666], [0.6666666666666666, 0.3333333333333333, 0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
     def test_multipleRendija_cuantica(self):

        m=[[(1,0),(0,0),(0,0)],[(0,0),(0,0),(1/2,0)]]
        result = slit.multipleRendijaCuantico(2,1,m)
        
        self.assertEqual(result,[[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0.7071067811865475, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0.7071067811865475, 0), [(1, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0.5, 0)], (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), [(1, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0.5, 0)], (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), [(1, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0.5, 0)], (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)], [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]])
     def test_experimento_canicas(self):
 
        m=[[(1,0),(0,0),(0,0)],[(0,0),(0,0),(1/2,0)]]
        result = slit.experimento_Canicas([[0,0,0,0,0,0],[0,0,0,0,0,0],[0,1,0,0,0,1],[0,0,0,1,0,0],[0,0,1,0,0,0],[1,0,0,0,1,0]],[6,2,1,5,3,10],1)
        self.assertEqual(result,[0, 0, 12, 5, 1, 9])


if __name__ == '__main__':
    unittest.main()

